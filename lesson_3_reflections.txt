When would you want to use a remote repository rather than keeping all your work local?

	When working in a team, to share work as fast as possible and allow continuos work on the same project for more than one person. 


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Someone else might have worked on the project and introduced changes that you don't neccesarly would like to have introduced in your local version of code. 


Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are copied repositories "inside" GitHub, clones are repositories copied between to local machines, or local machine and GitHub, branches are parts of repository. 

	If I would like to copy somebody's else repository to work on it without permision to change his repository I could use forking. To copy into my own machine I could clone repository from GitHub


What is the benefit of having a copy of the last known state of the remote stored locally?

	That it's posible to compare local version with last known remote version of file without neccecity of merging them straight away. 	


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	I imagine that I would have to send new version of the file to other people and they have to compare my new version with their own and resend it to me with their comments or changes and so on. It look pretty tedious, with git and GitHub is easier, faster, more efficient provided one know how to use it.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	When I'm not sure if the changes I want to introduce are good enough and/or need to ask somebody else for opinion. That way we keep master all the time in the highest quality and itroduce changes only when they're thoroughly checked. Introducing changes directly into master is much faster though. 